*githubapi.txt*	Implement Github API via viml
Wang Shidong                                                       *githubapi*

==============================================================================
CONTENTS                                                  *githubapi-contents*
  1. Configuration..........................................|githubapi-config|
  2. Functions...........................................|githubapi-functions|

==============================================================================
CONFIGURATION                                               *githubapi-config*

                                                        *g:githubapi_root_url*
Github api root url:

default : https://api.github.com/

==============================================================================
FUNCTIONS                                                *githubapi-functions*

githubapi#activity#List_events()            *githubapi#activity#List_events()*
  List public events

  Github API : GET /events

githubapi#activity#List_repo_events({owner}, {repo})
                                       *githubapi#activity#List_repo_events()*
  List repository events

  Github API : GET /repos/:owner/:repo/events

githubapi#activity#List_net_events({owner}, {repo})
                                        *githubapi#activity#List_net_events()*
  List public events for a network of repositories

  Github API : GET /networks/:owner/:repo/events

githubapi#activity#List_org_events({org})
                                        *githubapi#activity#List_org_events()*
  List public events for an organization

  Github API : GET /orgs/:org/events

githubapi#activity#List_user_events({user})
                                       *githubapi#activity#List_user_events()*
  List events that a user has received

  These are events that you've received by watching repos and following users.
  If you are authenticated as the given user, you will see private events.
  Otherwise, you'll only see public events.

  Github API : GET /users/:username/received_events

githubapi#activity#List_public_user_events({user})
                                *githubapi#activity#List_public_user_events()*
  List public events that a user has received

  Github API : GET /users/:username/received_events/public

githubapi#activity#Performed_events({user})
                                       *githubapi#activity#Performed_events()*
  List events performed by a user

  If you are authenticated as the given user, you will see your private
  events. Otherwise, you'll only see public events.

  Github API : GET /users/:username/events

githubapi#activity#Performed_events({user})
                                       *githubapi#activity#Performed_events()*
  List public events performed by a user

  Github API : GET /users/:username/events/public

githubapi#activity#List_user_org_events({user}, {org}, {password})
                                   *githubapi#activity#List_user_org_events()*
  List events for an organization

  NOTE:This is the user's organization dashboard. You must be authenticated as
  the user to view this.

  Github API : GET /users/:username/events/orgs/:org

githubapi#issues#List_All({user}, {password})    *githubapi#issues#List_All()*
  List issues List all issues assigned to the authenticated user across all
  visible repositories including owned repositories, member repositories, and
  organization repositories:

  Github API : GET /issues

githubapi#issues#List_All_for_User({user}, {password})
                                        *githubapi#issues#List_All_for_User()*
  List all issues across owned and member repositories assigned to the
  authenticated user:

  Github API : GET /user/issues

githubapi#issues#List_All_for_User_In_Org({org}, {user}, {password})
                                 *githubapi#issues#List_All_for_User_In_Org()*
  List all issues for a given organization assigned to the authenticated user:

  Github API : GET /orgs/:org/issues

githubapi#issues#Get_issue({owner}, {repo}, {num})
                                                *githubapi#issues#Get_issue()*
  Get a single issue GET /repos/:owner/:repo/issues/:number

githubapi#issues#Create({owner}, {repo}, {user}, {password}, {json})
                                                   *githubapi#issues#Create()*
  Create an issue

  Github API : POST /repos/:owner/:repo/issues

  Input:
>
    {
     "title": "Found a bug",
     "body": "I'm having a problem with this.",
     "assignee": "octocat",
     "milestone": 1,
     "labels": [
       "bug"
     ]
    }
<

githubapi#issues#Lock({owner}, {repo}, {num}, {user}, {password})
                                                     *githubapi#issues#Lock()*
  Lock an issue

  Github APi : PUT /repos/:owner/:repo/issues/:number/lock

githubapi#issues#Unlock({owner}, {repo}, {num}, {user}, {password})
                                                   *githubapi#issues#Unlock()*
  Unlock an issue

  Github API : DELETE /repos/:owner/:repo/issues/:number/lock

githubapi#issues#List_assignees({owner}, {repo})
                                           *githubapi#issues#List_assignees()*
  Lists all the available assignees to which issues may be assigned.

  Github API : GET /repos/:owner/:repo/assignees

githubapi#issues#Check_assignee({owner}, {repo}, {assignee})
                                           *githubapi#issues#Check_assignee()*
  Check assignee

  Github API : GET /repos/:owner/:repo/assignees/:assignee

githubapi#issues#Addassignee({owner}, {repo}, {num}, {assignees}, {user},
  {password})                                 *githubapi#issues#Addassignee()*
  Add assignees to an Issue

  Github API : POST /repos/:owner/:repo/issues/:number/assignees

  NOTE: need `Accep:application/vnd.github.cerberus-preview+json`

  Input:
>
    {
     "assignees": [
       "hubot",
       "other_assignee"
     ]
    }
<

githubapi#issues#Removeassignee({owner}, {repo}, {num}, {assignees}, {user},
  {password})                              *githubapi#issues#Removeassignee()*
  Remove assignees from an Issue

  DELETE /repos/:owner/:repo/issues/:number/assignees

  Input:
>
    {
     "assignees": [
       "hubot",
       "other_assignee"
     ]
    }
<
  NOTE: need `Accep:application/vnd.github.cerberus-preview+json`

githubapi#issues#List_comments({owner}, {repo}, {num}, {since})
                                            *githubapi#issues#List_comments()*
  List comments on an issue, updated at or after {since} . {since} :
  YYYY-MM-DDTHH:MM:SSZ

  Github API : GET /repos/:owner/:repo/issues/:number/comments

githubapi#issues#List_All_comments({owner}, {repo}, {sort}, {desc}, {since})
                                        *githubapi#issues#List_All_comments()*
  List comments in a repository

  Github API : GET /repos/:owner/:repo/issues/comments

githubapi#issues#Get_comment({owner}, {repo}, {id})
                                              *githubapi#issues#Get_comment()*
  Get a single comment

  Github API : GET /repos/:owner/:repo/issues/comments/:id

githubapi#issues#Create_comment({owner}, {repo}, {num}, {json}, {user},
  {password})                              *githubapi#issues#Create_comment()*
  Create a comment

  Input:
>
    {
        "body": "Me too"
    }
<
  Github API : POST /repos/:owner/:repo/issues/:number/comments

githubapi#issues#Edit_comment({owner}, {repo}, {id}, {json}, {user},
  {password})                                *githubapi#issues#Edit_comment()*
  Edit a comment

  Input:
>
    {
        "body": "Me too"
    }
<
  Github API : PATCH /repos/:owner/:repo/issues/comments/:id

githubapi#issues#Delete_comment({owner}, {repo}, {id}, {user}, {password})
                                           *githubapi#issues#Delete_comment()*
  Delete a comment

  Github API : ELETE /repos/:owner/:repo/issues/comments/:id

githubapi#issues#List_events({owner}, {repo}, {num})
                                              *githubapi#issues#List_events()*
  List events for an issue Github API : GET
  /repos/:owner/:repo/issues/:issue_number/events

githubapi#issues#List_events_for_repo({owner}, {repo})
                                     *githubapi#issues#List_events_for_repo()*
  List events for a repository

  Github API : GET /repos/:owner/:repo/issues/events

githubapi#issues#Get_event({owner}, {repo}, {id})
                                                *githubapi#issues#Get_event()*
  Get a single event

  Github API : GET /repos/:owner/:repo/issues/events/:id


vim:tw=78:ts=8:ft=help:norl:
