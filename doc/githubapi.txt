*githubapi.txt*	Implement Github API via viml
Wang Shidong                                                       *githubapi*

==============================================================================
CONTENTS                                                  *githubapi-contents*
  1. Configuration..........................................|githubapi-config|
  2. Functions...........................................|githubapi-functions|

==============================================================================
CONFIGURATION                                               *githubapi-config*

                                                        *g:githubapi_root_url*
Github api root url:

default : https://api.github.com/

==============================================================================
FUNCTIONS                                                *githubapi-functions*

githubapi#ListAllOrgs({since})                       *githubapi#ListAllOrgs()*
  List all orgs in github,{since} is the integer ID of the last Organization
  that you've seen.

  Github API : GET /organizations

githubapi#activity#List_events()            *githubapi#activity#List_events()*
  List public events

  Github API : GET /events

githubapi#activity#List_repo_events({owner}, {repo})
                                       *githubapi#activity#List_repo_events()*
  List repository events

  Github API : GET /repos/:owner/:repo/events

githubapi#activity#List_net_events({owner}, {repo})
                                        *githubapi#activity#List_net_events()*
  List public events for a network of repositories

  Github API : GET /networks/:owner/:repo/events

githubapi#activity#List_org_events({org})
                                        *githubapi#activity#List_org_events()*
  List public events for an organization

  Github API : GET /orgs/:org/events

githubapi#activity#List_user_events({user})
                                       *githubapi#activity#List_user_events()*
  List events that a user has received

  These are events that you've received by watching repos and following users.
  If you are authenticated as the given user, you will see private events.
  Otherwise, you'll only see public events.

  Github API : GET /users/:username/received_events

githubapi#activity#List_public_user_events({user})
                                *githubapi#activity#List_public_user_events()*
  List public events that a user has received

  Github API : GET /users/:username/received_events/public

githubapi#activity#Performed_events({user})
                                       *githubapi#activity#Performed_events()*
  List events performed by a user

  If you are authenticated as the given user, you will see your private
  events. Otherwise, you'll only see public events.

  Github API : GET /users/:username/events

githubapi#activity#Performed_public_events({user})
                                *githubapi#activity#Performed_public_events()*
  List public events performed by a user

  Github API : GET /users/:username/events/public

githubapi#activity#List_user_org_events({user}, {org}, {password})
                                   *githubapi#activity#List_user_org_events()*
  List events for an organization

  NOTE:This is the user's organization dashboard. You must be authenticated as
  the user to view this.

  Github API : GET /users/:username/events/orgs/:org

githubapi#activity#List_notifications({user}, {password})
                                     *githubapi#activity#List_notifications()*
  List your notifications

  Github API : /notifications

githubapi#activity#List_notifications_for_repo({onwer}, {repo}, {user},
  {password})               *githubapi#activity#List_notifications_for_repo()*
  List your notifications in a repository

  Github API : GET /repos/:owner/:repo/notifications

githubapi#activity#Mark_All_as_read({user}, {password}, {last_read_at})
                                       *githubapi#activity#Mark_All_as_read()*
  Mark as read,you need use {last_read_at} as args. This is a timestamp in ISO
  8601 format: YYYY-MM-DDTHH:MM:SSZ. Default: Time.now

  Github API : PUT /notifications

githubapi#activity#Mark_All_as_read_for_repo({owner}, {repo}, {user},
  {password}, {last_read_at}) *githubapi#activity#Mark_All_as_read_for_repo()*
  Mark notifications as read in a repository

  Github API : PUT /repos/:owner/:repo/notifications

githubapi#activity#Get_thread({id}, {user}, {password})
                                             *githubapi#activity#Get_thread()*
  View a single thread

  Github API : GET /notifications/threads/:id

githubapi#activity#Mark_thread({id}, {user}, {password})
                                            *githubapi#activity#Mark_thread()*
  Mark a thread as read

  Github API : PATCH /notifications/threads/:id

githubapi#activity#Get_thread_sub({id}, {user}, {password})
                                         *githubapi#activity#Get_thread_sub()*
  Get a Thread Subscription

  Github API : GET /notifications/threads/:id/subscription

githubapi#activity#Set_thread_sub({id}, {user}, {password}, {subscribed},
  {ignored})                             *githubapi#activity#Set_thread_sub()*
  Set a Thread Subscription

  This lets you subscribe or unsubscribe from a conversation. Unsubscribing
  from a conversation mutes all future notifications (until you comment or get
  @mentioned once more).

  Github API : PUT /notifications/threads/:id/subscription

githubapi#activity#Del_thread_sub({id}, {user}, {password})
                                         *githubapi#activity#Del_thread_sub()*
  Delete a Thread Subscription

  Github API : DELETE /notifications/threads/:id/subscription

githubapi#activity#List_stargazers({owner}, {repo})
                                        *githubapi#activity#List_stargazers()*
  List stargazers of the repo

  Github API : GET /repos/:owner/:repo/stargazers

githubapi#activity#CheckStarred({owner}, {repo}, {user}, {password})
                                           *githubapi#activity#CheckStarred()*
  Check starred

  Github API : GET /user/starred/:owner/:repo

githubapi#activity#Star({owner}, {repo}, {user}, {password})
                                                   *githubapi#activity#Star()*
  Star a repository

  Github API : PUT /user/starred/:owner/:repo

githubapi#activity#Unstar({owner}, {repo}, {user}, {password})
                                                 *githubapi#activity#Unstar()*
  Unstar a repository

  Github API : DELETE /user/starred/:owner/:repo

githubapi#activity#List_watchers({owner}, {repo})
                                          *githubapi#activity#List_watchers()*
  List watchers

  Github API : GET /repos/:owner/:repo/subscribers

githubapi#activity#List_watched_repo({user})
                                      *githubapi#activity#List_watched_repo()*
  List repositories being watched by a user.

  Github API : GET /users/:username/subscriptions

githubapi#activity#List_auth_watched_repo({user}, {password})
                                 *githubapi#activity#List_auth_watched_repo()*
  List repositories being watched by the authenticated user.

  Github API : GET /user/subscriptions

githubapi#activity#Check_repo_Sub({owner}, {repo}, {user}, {password})
                                         *githubapi#activity#Check_repo_Sub()*
  Get a Repository Subscription

  Github API : GET /repos/:owner/:repo/subscription

githubapi#activity#Set_repo_sub({owner}, {repo}, {user}, {password}, {sub},
  {ignore})                                *githubapi#activity#Set_repo_sub()*
  Set a Repository Subscription

  If you would like to watch a repository, set {sub} to 1. If you would like
  to ignore notifications made within a repository, set {ignore} to 1. If you
  would like to stop watching a repository, delete the repository's
  subscription completely.

  Github API : PUT /repos/:owner/:repo/subscription

githubapi#activity#Del_repo_sub({owner}, {repo}, {user}, {password})
                                           *githubapi#activity#Del_repo_sub()*
  Delete a Repository Subscription

  Github API : DELETE /repos/:owner/:repo/subscription

githubapi#gist#List({user})                            *githubapi#gist#List()*
  List public gists for the specified user:

  GET /users/:username/gists

githubapi#gist#ListAll({user}, {password})          *githubapi#gist#ListAll()*
  List the authenticated user's gists or if called anonymously, this will
  return all public gists:

  GET /gists

githubapi#gist#ListPublic({since})               *githubapi#gist#ListPublic()*
  List all public gists

  Get /gists/public

githubapi#gist#ListStarred({user}, {password}, {since})
                                                *githubapi#gist#ListStarred()*
  List starred gists,{since}A timestamp in ISO 8601 format:
  YYYY-MM-DDTHH:MM:SSZ. Only gists updated at or after this time are returned.

  GET /gists/starred

githubapi#gist#GetSingle({id})                    *githubapi#gist#GetSingle()*
  Get a single gist

  Github API : GET /gists/:id

githubapi#gist#GetSingleSha({id}, {sha})       *githubapi#gist#GetSingleSha()*
  Get a specific revision of a gist

  Github API : GET /gists/:id/:sha

githubapi#gist#Create({desc}, {filename}, {content}, {public}, {user},
  {password})                                        *githubapi#gist#Create()*
  Create a gist

  Input:
>
     {
       "description": "the description for this gist",
       "public": true,
       "files": {
         "file1.txt": {
           "content": "String file contents"
         }
       }
     }
<
  POST : /gists

githubapi#gist#Edit({desc}, {filename}, {content}, {public}, {user},
  {password}, {id})                                    *githubapi#gist#Edit()*
  Edit a gist

  Input:
>
     {
       "description": "the description for this gist",
       "files": {
         "file1.txt": {
           "content": "updated file contents"
         },
         "old_name.txt": {
           "filename": "new_name.txt",
           "content": "modified contents"
         },
         "new_file.txt": {
           "content": "a new file"
         },
         "delete_this_file.txt": null
       }
     }
<
  PATCH : /gists/:id Note: All files from the previous version of the gist are
  carried over by default if not included in the object. Deletes can be
  performed by including the filename with a null object.

githubapi#gist#ListCommits({id})                *githubapi#gist#ListCommits()*
  List gist commits

  Github API : GET /gists/:id/commits

githubapi#gist#Star({user}, {password}, {id})          *githubapi#gist#Star()*
  Star a gist

  Github API : PUT /gists/:id/star

githubapi#gist#Unstar({user}, {password}, {id})      *githubapi#gist#Unstar()*
  Unstar a gist

  Github API : DELETE /gists/:id/star

githubapi#gist#CheckStar({user}, {password}, {id})
                                                  *githubapi#gist#CheckStar()*
  Check if a gist is starred

  Github API : GET /gists/:id/star

githubapi#gist#Fork({user}, {password}, {id})          *githubapi#gist#Fork()*
  Fork a gist

  Github API : POST /gists/:id/forks

githubapi#gist#ListFork({user}, {password}, {id})  *githubapi#gist#ListFork()*
  List Fork of a gist

  Github API : GET /gists/:id/forks

githubapi#gist#Del({user}, {password}, {id})            *githubapi#gist#Del()*
  Delete a gist

  Github API : DELETE /gists/:id

githubapi#gist#ListComments({id})              *githubapi#gist#ListComments()*
  List comments on a gist

  Github API : GET /gists/:gist_id/comments

githubapi#gist#GetComment({gistid}, {commentid}) *githubapi#gist#GetComment()*
  Get a single comment

  Github API : GET /gists/:gist_id/comments/:id

githubapi#gist#CreateComment({id}, {user}, {password}, {body})
                                              *githubapi#gist#CreateComment()*
  Create a comment

  Github API : POST /gists/:gist_id/comments

githubapi#gist#EditComment({id}, {user}, {password}, {body})
                                                *githubapi#gist#EditComment()*
  Edit a comment

  Github API : PATCH /gists/:gist_id/comments

githubapi#gist#DelComment({gistid}, {id}, {user}, {password})
                                                 *githubapi#gist#DelComment()*
  Delete a comment

  Github API : DELETE /gists/:gist_id/comments/:id

githubapi#issues#List_All({user}, {password})    *githubapi#issues#List_All()*
  List issues List all issues assigned to the authenticated user across all
  visible repositories including owned repositories, member repositories, and
  organization repositories:

  Github API : GET /issues

githubapi#issues#List_All_for_User({user}, {password})
                                        *githubapi#issues#List_All_for_User()*
  List all issues across owned and member repositories assigned to the
  authenticated user:

  Github API : GET /user/issues

githubapi#issues#List_All_for_User_In_Org({org}, {user}, {password})
                                 *githubapi#issues#List_All_for_User_In_Org()*
  List all issues for a given organization assigned to the authenticated user:

  Github API : GET /orgs/:org/issues

githubapi#issues#Get_issue({owner}, {repo}, {num})
                                                *githubapi#issues#Get_issue()*
  Get a single issue GET /repos/:owner/:repo/issues/:number

githubapi#issues#Create({owner}, {repo}, {user}, {password}, {issue})
                                                   *githubapi#issues#Create()*
  Create an issue

  Input:
>
    {
     "title": "Found a bug",
     "body": "I'm having a problem with this.",
     "assignee": "octocat",
     "milestone": 1,
     "labels": [
       "bug"
     ]
    }
<
  Github API : POST /repos/:owner/:repo/issues

githubapi#issues#Lock({owner}, {repo}, {num}, {user}, {password})
                                                     *githubapi#issues#Lock()*
  Lock an issue

  Github APi : PUT /repos/:owner/:repo/issues/:number/lock

githubapi#issues#Unlock({owner}, {repo}, {num}, {user}, {password})
                                                   *githubapi#issues#Unlock()*
  Unlock an issue

  Github API : DELETE /repos/:owner/:repo/issues/:number/lock

githubapi#issues#List_assignees({owner}, {repo})
                                           *githubapi#issues#List_assignees()*
  Lists all the available assignees to which issues may be assigned.

  Github API : GET /repos/:owner/:repo/assignees

githubapi#issues#Check_assignee({owner}, {repo}, {assignee})
                                           *githubapi#issues#Check_assignee()*
  Check assignee

  Github API : GET /repos/:owner/:repo/assignees/:assignee

githubapi#issues#Addassignee({owner}, {repo}, {num}, {assignees}, {user},
  {password})                                 *githubapi#issues#Addassignee()*
  Add assignees to an Issue

  Input:
>
    {
     "assignees": [
       "hubot",
       "other_assignee"
     ]
    }
<
  Github API : POST /repos/:owner/:repo/issues/:number/assignees

  NOTE: need `Accep:application/vnd.github.cerberus-preview+json`

githubapi#issues#Removeassignee({owner}, {repo}, {num}, {assignees}, {user},
  {password})                              *githubapi#issues#Removeassignee()*
  Remove assignees from an Issue

  Input:
>
    {
     "assignees": [
       "hubot",
       "other_assignee"
     ]
    }
<
  DELETE /repos/:owner/:repo/issues/:number/assignees

  NOTE: need `Accep:application/vnd.github.cerberus-preview+json`

githubapi#issues#List_comments({owner}, {repo}, {num}, {since})
                                            *githubapi#issues#List_comments()*
  List comments on an issue, updated at or after {since} . {since} :
  YYYY-MM-DDTHH:MM:SSZ

  Github API : GET /repos/:owner/:repo/issues/:number/comments

githubapi#issues#List_All_comments({owner}, {repo}, {sort}, {desc}, {since})
                                        *githubapi#issues#List_All_comments()*
  List comments in a repository

  Github API : GET /repos/:owner/:repo/issues/comments

githubapi#issues#Get_comment({owner}, {repo}, {id})
                                              *githubapi#issues#Get_comment()*
  Get a single comment

  Github API : GET /repos/:owner/:repo/issues/comments/:id

githubapi#issues#Create_comment({owner}, {repo}, {num}, {json}, {user},
  {password})                              *githubapi#issues#Create_comment()*
  Create a comment

  Input:
>
    {
        "body": "Me too"
    }
<
  Github API : POST /repos/:owner/:repo/issues/:number/comments

githubapi#issues#Edit_comment({owner}, {repo}, {id}, {json}, {user},
  {password})                                *githubapi#issues#Edit_comment()*
  Edit a comment

  Input:
>
    {
        "body": "Me too"
    }
<
  Github API : PATCH /repos/:owner/:repo/issues/comments/:id

githubapi#issues#Delete_comment({owner}, {repo}, {id}, {user}, {password})
                                           *githubapi#issues#Delete_comment()*
  Delete a comment

  Github API : ELETE /repos/:owner/:repo/issues/comments/:id

githubapi#issues#List_events({owner}, {repo}, {num})
                                              *githubapi#issues#List_events()*
  List events for an issue Github API : GET
  /repos/:owner/:repo/issues/:issue_number/events

githubapi#issues#List_events_for_repo({owner}, {repo})
                                     *githubapi#issues#List_events_for_repo()*
  List events for a repository

  Github API : GET /repos/:owner/:repo/issues/events

githubapi#issues#Get_event({owner}, {repo}, {id})
                                                *githubapi#issues#Get_event()*
  Get a single event

  Github API : GET /repos/:owner/:repo/issues/events/:id

githubapi#issues#ListAllMilestones({owner}, {repo}, {state}, {sort},
  {direction})                          *githubapi#issues#ListAllMilestones()*
  List milestones for a repository

  Github API : GET /repos/:owner/:repo/milestones Parameters
>
    Name      Type      Description
    state     string The state of the milestone. Either open, closed, or all.
                     Default: open
    sort      string What to sort results by. Either due_on or completeness.
                     Default: due_on
    direction string The direction of the sort. Either asc or desc.
                     Default: asc
<

githubapi#issues#GetSingleMilestone({owner}, {repo}, {num})
                                       *githubapi#issues#GetSingleMilestone()*
  Get a single milestone

  Github API : GET /repos/:owner/:repo/milestones/:number

githubapi#issues#CreateMilestone({owner}, {repo}, {milestone}, {user},
  {password})                             *githubapi#issues#CreateMilestone()*
  Create a milestone

  Input
>
     {
       "title": "v1.0",
       "state": "open",
       "description": "Tracking milestone for version 1.0",
       "due_on": "2012-10-09T23:39:01Z"
     }
<
  Github API : POST /repos/:owner/:repo/milestones

githubapi#issues#UpdateMilestone({owner}, {repo}, {num}, {milestone}, {user},
  {password})                             *githubapi#issues#UpdateMilestone()*
  Update a milestone

  Github API : PATCH /repos/:owner/:repo/milestones/:number

githubapi#issues#DeleteMilestone({owner}, {repo}, {num}, {user}, {password})
                                          *githubapi#issues#DeleteMilestone()*
  Delete a milestone

  Github API : DELETE /repos/:owner/:repo/milestones/:number

githubapi#labels#GetAll({owner}, {repo})           *githubapi#labels#GetAll()*
  List all labels for this repository

  Github API : GET /repos/:owner/:repo/labels

githubapi#labels#Get({owner}, {repo}, {name})         *githubapi#labels#Get()*
  Get a single label

  Github API : GET /repos/:owner/:repo/labels/:name

githubapi#labels#Create({owner}, {repo}, {user}, {password}, {label})
                                                   *githubapi#labels#Create()*
  Create a label

  Input:
>
    {
        "name": "bug",
        "color": "f29513"
    }
<
  Github API : POST /repos/:owner/:repo/labels

githubapi#labels#Update({owner}, {repo}, {user}, {password}, {label})
                                                   *githubapi#labels#Update()*
  Update a label

  Input:
>
    {
        "name": "bug",
        "color": "f29513"
    }
<
  Github API : PATCH /repos/:owner/:repo/labels/:name

githubapi#labels#Delete({owner}, {repo}, {name}, {user}, {password})
                                                   *githubapi#labels#Delete()*
  Delete a label

  Github API : DELETE /repos/:owner/:repo/labels/:name

githubapi#labels#List({owner}, {repo}, {num})        *githubapi#labels#List()*
  List labels on an issue

  Github API : GET /repos/:owner/:repo/issues/:number/labels

githubapi#labels#Add({owner}, {repo}, {num}, {labels}, {user}, {password})
                                                      *githubapi#labels#Add()*
  Add labels to an issue

  Input:
>
    [
        "Label1",
        "Label2"
    ]
<
  Github API : POST /repos/:owner/:repo/issues/:number/labels

githubapi#labels#Remove({owner}, {repo}, {num}, {name}, {user}, {password})
                                                   *githubapi#labels#Remove()*
  Remove a label from an issue

  Github API : DELETE /repos/:owner/:repo/issues/:number/labels/:name

githubapi#labels#Replace({owner}, {repo}, {num}, {labels}, {user}, {password})
                                                  *githubapi#labels#Replace()*
  Replace all labels for an issue

  Input:
>
    [
        "Label1",
        "Label2"
    ]
<
  Github API : PUT /repos/:owner/:repo/issues/:number/labels

githubapi#labels#RemoveAll({owner}, {repo}, {num}, {user}, {password})
                                                *githubapi#labels#RemoveAll()*
  Remove all label from an issue

  Github API : DELETE /repos/:owner/:repo/issues/:number/labels

githubapi#labels#ListAllinMilestone({owner}, {repo}, {num})
                                       *githubapi#labels#ListAllinMilestone()*
  Get labels for every issue in a milestone

  Github API : GET /repos/:owner/:repo/milestones/:number/labels

githubapi#orgs#Get({org})                               *githubapi#orgs#Get()*
  Get an organization

  Github API : GET /orgs/:org

githubapi#orgs#Edit({org}, {orgdata}, {user}, {password})
                                                       *githubapi#orgs#Edit()*
  Edit an organization

  Input:
>
     {
       "billing_email": "support@github.com",
       "blog": "https://github.com/blog",
       "company": "GitHub",
       "email": "support@github.com",
       "location": "San Francisco",
       "name": "github",
       "description": "GitHub, the company."
     }
<
  Github API : PATCH /orgs/:org

githubapi#orgs#ListMembers({org}, {filter}, {role})
                                                *githubapi#orgs#ListMembers()*
  List all users who are members of an organization.

    {filter}Filter members returned in the list. Can be one of:
    * 2fa_disabled: Members without two-factor authentication enabled.
      Available for organization owners.
    * all: All members the authenticated user can see.
    * Default: all.

    {role}Filter members returned by their role. Can be one of:
    * all: All members of the organization, regardless of role.
    * admin: Organization owners.
    * member: Non-owner organization members.
    * Default: all.

  Github API : GET /orgs/:org/members

githubapi#orgs#CheckMembership({org}, {username}, {user}, {password})
                                            *githubapi#orgs#CheckMembership()*
  Check if a user is, publicly or privately, a member of the organization.

  Status:

    * 204: requester is an organization member and user is a member
    * 404: requester is an organization member and user is not a member,
      requester is not an organization member and is inquiring about
      themselves
    * 302: requester is not an organization member

  Github API : GET /orgs/:org/members/:username

githubapi#orgs#DeleteMember({org}, {username}, {user}, {password})
                                               *githubapi#orgs#DeleteMember()*
  Remove a member

  Github API : DELETE /orgs/:org/members/:username

githubapi#orgs#ListPublicMembers({org})   *githubapi#orgs#ListPublicMembers()*
  List public members of an org

  Github API : GET /orgs/:org/public_members

githubapi#orgs#CheckPublicMembership({org}, {username})
                                      *githubapi#orgs#CheckPublicMembership()*
  Check public membership

  Github API : GET /orgs/:org/public_members/:username

githubapi#orgs#Publicize({org}, {user}, {password})
                                                  *githubapi#orgs#Publicize()*
  Publicize a user's membership The user can publicize their own membership.
  (A user cannot publicize the membership for another user.)

  Github API : PUT /orgs/:org/public_members/:username

githubapi#orgs#ConcealUser({org}, {user}, {password})
                                                *githubapi#orgs#ConcealUser()*
  Conceal a user's membership

  Github API : DELETE /orgs/:org/public_members/:username

githubapi#orgs#GetMemberships({org}, {username}, {user}, {password})
                                             *githubapi#orgs#GetMemberships()*
  Get organization membership

  Github API : GET /orgs/:org/memberships/:username

githubapi#orgs#UpdateMembership({org}, {username}, {user}, {password}, {role})
                                           *githubapi#orgs#UpdateMembership()*
  Add or update organization membership,use admin or member for {role}

  Github API : PUT /orgs/:org/memberships/:username

githubapi#orgs#RemoveMembership({org}, {username}, {user}, {password})
                                           *githubapi#orgs#RemoveMembership()*
  Remove organization membership

  Github API : DELETE /orgs/:org/memberships/:username

githubapi#pulls#ListAllPRs({owner}, {repo})     *githubapi#pulls#ListAllPRs()*
  List all the PRs of a repo.

  Github API : GET /repos/:owner/:repo/pulls

githubapi#pulls#Get({owner}, {repo}, {number})         *githubapi#pulls#Get()*
  Get a single pull request

  Github API : GET /repos/:owner/:repo/pulls/:number

githubapi#pulls#create({owner}, {repo}, {user}, {password}, {pull})
                                                    *githubapi#pulls#create()*
  Create a pull request

  Input:
>
     {
       "title": "Amazing new feature",
       "body": "Please pull this in!",
       "head": "octocat:new-feature",
       "base": "master"
     }
<
  or:
>
     {
       "issue": 5,
       "head": "octocat:new-feature",
       "base": "master"
     }
<
  Github API : POST /repos/:owner/:repo/pulls

githubapi#pulls#update({owner}, {repo}, {number}, {pull}, {user}, {password})
                                                    *githubapi#pulls#update()*
  Update a pull request

  Input:
>
     {
       "title": "new title",
       "body": "updated body",
       "state": "open"
     }
<
  Github API : PATCH /repos/:owner/:repo/pulls/:number

githubapi#pulls#ListCommits({owner}, {repo}, {number})
                                               *githubapi#pulls#ListCommits()*
  List commits on a pull request

  Github API : GET /repos/:owner/:repo/pulls/:number/commits

githubapi#pulls#ListFiles({owner}, {repo}, {number})
                                                 *githubapi#pulls#ListFiles()*
  List pull requests files

  Github API : GET /repos/:owner/:repo/pulls/:number/files

githubapi#pulls#CheckMerged({owner}, {repo}, {number})
                                               *githubapi#pulls#CheckMerged()*
  Get if a pull request has been merged

  Github API : GET /repos/:owner/:repo/pulls/:number/merge

githubapi#pulls#Merge({owner}, {repo}, {number}, {msg}, {user}, {password})
                                                     *githubapi#pulls#Merge()*
  Merge a pull request (Merge Button)

  Github API : PUT /repos/:owner/:repo/pulls/:number/merge

githubapi#user#ListOrgs({auth})                    *githubapi#user#ListOrgs()*
  List all orgs for the auth user.

  Github API : GET /user/orgs

githubapi#user#GetOrgMembership({user}, {password}, {org})
                                           *githubapi#user#GetOrgMembership()*
  Get your organization membership

  Github API : GET /user/memberships/orgs/:org

githubapi#user#EditOrgMembership({org}, {state}, {user}, {password})
                                          *githubapi#user#EditOrgMembership()*
  Edit your organization membership

  Input:
>
     {
       "state": "active"
     }
<
  Github API : PATCH /user/memberships/orgs/:org

githubapi#users#ListAllOrgs({user})            *githubapi#users#ListAllOrgs()*
  List orgs of a specified user.

  Github API : /users/:username/orgs

githubapi#util#Get_current_time()          *githubapi#util#Get_current_time()*
  Get current time in a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ

githubapi#util#GetLog()                              *githubapi#util#GetLog()*
  view the log of API

githubapi#util#CleanLog()                          *githubapi#util#CleanLog()*

  Clean up the log of the API


vim:tw=78:ts=8:ft=help:norl:
